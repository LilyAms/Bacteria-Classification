#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 16 11:52:01 2021

@author: Lily Amsellem
"""
import os
import subprocess
import shlex
import pandas as pd
from Bio import SearchIO
from data_processing import read_fasta

columns = ['query', 'target', '% identity', 'alignment length',
           'mismatches', 'gap opens', 'q. start', 'q. end', 's. start', 's. end', 'evalue', 'bit score']

def execute_cline(cmd, **kwargs):                                                                                                 
    subprocess.call(shlex.split(cmd))

if __name__=='__main__':
    
    # Go to ncbi database directory    
    os.chdir('../BLAST_data/ncbi_16S_rRNA_db')
    # Get species and sequences from mock data
    mock_data_file = '../../mock_data/mock_com_28042021.fas'
    records = read_fasta(mock_data_file)
    species = [(record.id, record.seq) for record in records]
       
   
    for sp in species:
        # create a query file containing the sequence in a fasta format for BLAST search
        iD, seq = sp
        query_file = '../query_seq.fas'
        with open(query_file,'w') as q_file:
            q_file.write('>{}'.format(iD))
            q_file.write('\n')
            q_file.write(str(seq))
            q_file.write('\n')
        
        blast_tab_file = '../blast_results/blast_hits_{}.tab'.format(iD)
 
        
        # ----------------- RUN BLAST ON QUERY FILE --------------------------
        # cline is ran from the database directory (I downloaded the db from NCBI)
        # -query {filepath to fasta file with sequences to align} -out {path to output file} 
        #-db {file name of the database, we are already in the directory} \
        #    -perc_identity {minimum required perc_identity of aligned sequences from db with the query} 
        #-max_target_seqs {max number of target seqs from db} -outfmt {output format of the blast file: 5 for XML, 
        # 6 for tabular}
        
        blast_args = {'query_file':shlex.quote(query_file), 'out_file':shlex.quote(blast_tab_file), 
                      'db':shlex.quote('16S_ribosomal_RNA'), 'max_target_seqs': 100, 
                      'perc_identity': 90, 'outfmt':6}
        
        blast_cmd = "blastn -query {query_file} -out {out_file} -db {db} \
            -perc_identity {perc_identity} -max_target_seqs {max_target_seqs} -outfmt {outfmt}".format_map(blast_args)
        
        execute_cline(blast_cmd, **blast_args)
        
        # Prints
        print('\n')
        print('------------------------')
        print('1. Running BLAST on query: {} with {}% identity'.format(iD,blast_args['perc_identity']))
        print('\n')
        
        # Filter hits based on percentage identity
        min_perc_identity = 90 # Same genus
        max_perc_identity = 97 # Different species
        blast_tab = pd.read_csv(blast_tab_file, sep = '\t', names = columns)
        mask = (blast_tab['% identity']>=min_perc_identity) & (blast_tab['% identity']<max_perc_identity)
        # Retrieve hit sequences ids to fetch full 16S rRNA sequences from ncbi database
        # Blast result does not contain the full sequences
        seq_ids = blast_tab[mask]['subject acc.ver']
        
        print('Found {} hits.'.format(len(blast_tab)))
        print('\n')
        
        ids_file = '../blast_results/hit_seq_ids_{}.txt'.format(iD)
        with open(ids_file,'w') as f:
            f.write('\n'.join(seq_ids))
            
        
        # Fetch nucleotide sequences in database
        print('2. Retrieving hit sequences from database...')
        print('\n')
        print("Extracted {} sequences within % identity range [{},{}] from {} sequences."
              .format(len(seq_ids),min_perc_identity,max_perc_identity,len(blast_tab)))
        
        # Search for the hits in the database
        out_file = '../blast_hit_sequences/similar_sequences_{}.fst'.format(iD) 
        db_cmd_args = {'dbtype': shlex.quote('nucl'), 'db': shlex.quote('16S_ribosomal_RNA'), 
                               'entry_batch': shlex.quote(ids_file), 
                               'out': shlex.quote(out_file), 'outfmt': shlex.quote('%f')}
        
        db_cmd = "blastdbcmd -db {db} -dbtype {dbtype} -entry_batch {entry_batch} -out {out} -outfmt {outfmt}".format_map(db_cmd_args)
 
        execute_cline(db_cmd, **db_cmd_args)
    